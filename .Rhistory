install.packages(tidyverse)
install.packages("tidyverse")
install.packages("shiny")
install.packages(c("bit", "bit64", "bslib", "cli", "cpp11", "curl", "data.table", "evaluate", "jsonlite", "openssl", "pillar", "processx", "ps", "purrr", "R6", "Rcpp", "readxl", "rlang", "systemfonts", "textshaping", "tinytex", "xfun", "xml2"))
install.packages(c("broom", "commonmark", "curl", "fs", "ggplot2", "httpuv", "jsonlite", "knitr", "later", "mime", "pillar", "ps", "ragg", "rlang", "sass", "stringi", "systemfonts", "tinytex", "tzdb", "xfun", "xml2"))
101010 <- a
a -> 1010
update.packages(ask = FALSE, checkBuilt = TRUE)
x <- 5*4
x
rmd(x)
install.packages("shiny")
install.packages("quarto")
library("shiny")
library("shiny")
runApp('R Repository/cgt_calculator')
runApp('R Repository/cgt_calculator')
setwd("~/R Repository/cgt_calculator")
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('cgt.R')
runApp('cgt.R')
runApp('cgt.R')
install.packages("shinythemes")
runApp('cgt.R')
runApp('cgt.R')
runApp('cgt.R')
runApp('cgt.R')
runApp('cgt.R')
runApp('cgt.R')
runApp('cgt.R')
runApp('cgt.R')
runApp('cgt.R')
runApp('cgt.R')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='nicom2000', token='916E351AC083C7CCDA7D73894912921D', secret='6+6zAJoXRzQdhXuVruK5a9GEdDsCKBeTEbPsfMq9')
shiny::runApp()
shiny::runApp()
rsconnect::accounts()
rsconnect::deployApp()
setwd("C:/Users/nicol/OneDrive/Documents/R Repository/website")
shiny::runApp('C:/Users/nicol/OneDrive/Documents/R Repository/cgt_calculator')
runApp('C:/Users/nicol/OneDrive/Documents/R Repository/cgt_calculator')
shiny::runApp('C:/Users/nicol/OneDrive/Documents/R Repository/cgt_calculator')
install.packages("benford.analysis")
install.packages("scales")
library(benford.analysis)
library(ggplot2)
library(dplyr)
library(scales)
# Generate synthetic data
set.seed(123)
fake_data <- data.frame(x = round(10^runif(100000, 0, 6)))  # Benford-like values
# Run Benford analysis
b <- benford(fake_data$x, number.of.digits = 1)
# Extract expected probabilities from Benford object
benford_probs <- b$benford.dist.freq  # This returns a data frame
# Clean and prepare for plotting
benford <- benford_probs %>%
transmute(
digit = Digit,
probability = Benford.freq / 100,  # Convert from % to decimal
label = sprintf("%.2f%%", Benford.freq)
)
# Plot
ggplot(benford, aes(x = factor(digit), y = probability)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = label), vjust = -0.5, color = "white", size = 4.5) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(
title = "Benford's Law Probability Distribution",
x = "Leading Digit",
y = "Probability"
) +
theme_minimal()
# Load packages
library(benford.analysis)
library(ggplot2)
library(dplyr)
library(scales)
# Generate Benford-like fake data
set.seed(123)
fake_data <- data.frame(x = round(10^runif(100000, 0, 6)))  # Values 1 to 1,000,000
# Run Benford analysis
b <- benford(fake_data$x, number.of.digits = 1)
# Get expected probabilities directly from Benford object
benford <- data.frame(
digit = 1:9,
probability = b$benford.dist.freq$Benford.freq / 100  # Convert % to decimal
)
library(benford.analysis)
library(ggplot2)
library(dplyr)
library(scales)
# Generate Benford-like data
set.seed(123)
fake_data <- data.frame(x = round(10^runif(100000, 0, 6)))
# Run Benford analysis
b <- benford(fake_data$x, number.of.digits = 1)
# Extract expected probabilities (Benford frequencies)
benford_probs <- b$benford.dist.freq  # this is a vector of 9 values
# Prepare plot data frame
benford <- data.frame(
digit = 1:9,
probability = benford_probs / 100,  # Convert % to decimal
label = sprintf("%.2f%%", benford_probs)
)
library(benford.analysis)
library(ggplot2)
library(dplyr)
library(scales)
# Generate Benford-like data
set.seed(123)
fake_data <- data.frame(x = round(10^runif(100000, 0, 6)))
# Run Benford analysis
b <- benford(fake_data$x, number.of.digits = 1)
# Extract expected Benford frequencies from distribution table
benford_probs <- b$distribution$benford  # Correct slot
# Prepare plot data
benford <- data.frame(
digit = 1:9,
probability = benford_probs / 100,
label = sprintf("%.2f%%", benford_probs)
)
library(ggplot2)
library(dplyr)
library(scales)
# Manually define Benford's Law expected probabilities
benford <- data.frame(
digit = 1:9,
probability = log10(1 + 1 / (1:9))
)
# Create percentage labels
benford$label <- sprintf("%.2f%%", benford$probability * 100)
# Plot
ggplot(benford, aes(x = factor(digit), y = probability)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = label), vjust = -0.5, color = "white", size = 4.5) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(
title = "Benford's Law Probability Distribution",
x = "Leading Digit",
y = "Probability"
) +
theme_minimal()
library(ggplot2)
library(scales)
benford <- data.frame(
digit = 1:9,
probability = log10(1 + 1 / (1:9))
)
benford$label <- paste0(sprintf("%.2f", benford$probability * 100), "%")
# Use dark-friendly colours and better label placement
ggplot(benford, aes(x = factor(digit), y = probability, fill = factor(digit))) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = label), vjust = -0.3, color = "white", size = 4.5) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
scale_fill_brewer(palette = "Blues") +
labs(
title = "Benford's Law Probability Distribution",
x = "Leading Digit",
y = "Probability"
) +
theme_minimal(base_size = 14) +
theme(
plot.background = element_rect(fill = "#222222", color = NA),
panel.background = element_rect(fill = "#222222", color = NA),
panel.grid.major = element_line(color = "#444444"),
panel.grid.minor = element_line(color = "#333333"),
axis.text = element_text(color = "#DDDDDD"),
axis.title = element_text(color = "#FFFFFF"),
plot.title = element_text(color = "#FFFFFF", face = "bold")
)
install.packages("plotly")
library(ggplot2)
library(scales)
library(plotly)
benford <- data.frame(
digit = 1:9,
probability = log10(1 + 1 / (1:9))
)
benford$label <- paste0(sprintf("%.2f", benford$probability * 100), "%")
p <- ggplot(benford, aes(x = factor(digit), y = probability, fill = factor(digit))) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = label), vjust = -0.3, color = "white", size = 4.5) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
scale_fill_brewer(palette = "Blues") +
labs(
title = "Benford's Law Probability Distribution",
x = "Leading Digit",
y = "Probability"
) +
theme_minimal(base_size = 14) +
theme(
plot.background = element_rect(fill = "#222222", color = NA),
panel.background = element_rect(fill = "#222222", color = NA),
panel.grid.major = element_line(color = "#444444"),
panel.grid.minor = element_line(color = "#333333"),
axis.text = element_text(color = "#DDDDDD"),
axis.title = element_text(color = "#FFFFFF"),
plot.title = element_text(color = "#FFFFFF", face = "bold")
)
# Convert to interactive plot
ggplotly(p)
library(ggplot2)
library(scales)
library(plotly)
benford <- data.frame(
digit = 1:9,
probability = log10(1 + 1 / (1:9))
)
benford$label <- paste0(sprintf("%.2f", benford$probability * 100), "%")
# Build the static ggplot
p <- ggplot(benford, aes(x = factor(digit), y = probability, fill = factor(digit))) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = label), vjust = -1.2, color = "#FFFFFF", size = 5, fontface = "bold") +
scale_y_continuous(labels = percent_format(accuracy = 1), expand = expansion(mult = c(0, 0.1))) +
scale_fill_brewer(palette = "Blues") +
labs(
title = "Benford's Law Probability Distribution",
x = "Leading Digit",
y = "Probability"
) +
theme_minimal(base_size = 14) +
theme(
plot.background = element_rect(fill = "#222222", color = NA),
panel.background = element_rect(fill = "#222222", color = NA),
panel.grid.major = element_line(color = "#444444"),
panel.grid.minor = element_line(color = "#333333"),
axis.text = element_text(color = "#DDDDDD"),
axis.title = element_text(color = "#FFFFFF"),
plot.title = element_text(color = "#FFFFFF", face = "bold")
)
# Convert to interactive plot
ggplotly(p)
library(ggplot2)
library(scales)
library(plotly)
benford <- data.frame(
digit = 1:9,
probability = log10(1 + 1 / (1:9))
)
benford$label <- paste0(sprintf("%.2f", benford$probability * 100), "%")
# Build the static ggplot
p <- ggplot(benford, aes(x = factor(digit), y = probability, fill = factor(digit))) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = label), vjust = 1.2, color = "#222222", size = 5.2, fontface = "bold") +
scale_y_continuous(labels = percent_format(accuracy = 1), expand = expansion(mult = c(0, 0.1))) +
scale_fill_brewer(palette = "Blues") +
labs(
title = "Benford's Law Probability Distribution",
x = "Leading Digit",
y = "Probability"
) +
theme_minimal(base_size = 14) +
theme(
plot.background = element_rect(fill = "#222222", color = NA),
panel.background = element_rect(fill = "#222222", color = NA),
panel.grid.major = element_line(color = "#444444"),
panel.grid.minor = element_line(color = "#333333"),
axis.text = element_text(color = "#DDDDDD"),
axis.title = element_text(color = "#FFFFFF"),
plot.title = element_text(color = "#FFFFFF", face = "bold")
)
# Convert to interactive plot
ggplotly(p)
library(ggplot2)
library(scales)
library(plotly)
benford <- data.frame(
digit = 1:9,
probability = log10(1 + 1 / (1:9))
)
benford$label <- paste0(sprintf("%.2f", benford$probability * 100), "%")
# Build the static ggplot
p <- ggplot(benford, aes(x = factor(digit), y = probability, fill = factor(digit))) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = label), vjust = -0.3, color = "#FFFF33", size = 5, fontface = "bold") +  # fluo yellow labels above bars
scale_y_continuous(labels = percent_format(accuracy = 1), expand = expansion(mult = c(0, 0.1))) +
scale_fill_brewer(palette = "Blues") +
labs(
title = "Benford's Law Probability Distribution",
x = "Leading Digit",
y = "Probability"
) +
theme_minimal(base_size = 14) +
theme(
plot.background = element_rect(fill = "#222222", color = NA),
panel.background = element_rect(fill = "#222222", color = NA),
panel.grid.major = element_line(color = "#444444"),
panel.grid.minor = element_line(color = "#333333"),
axis.text = element_text(color = "#DDDDDD"),
axis.title = element_text(color = "#FFFFFF"),
plot.title = element_text(color = "#FFFFFF", face = "bold")
)
# Convert to interactive plot
ggplotly(p)
library(ggplot2)
library(scales)
library(plotly)
benford <- data.frame(
digit = 1:9,
probability = log10(1 + 1 / (1:9))
)
benford$label <- paste0(sprintf("%.2f", benford$probability * 100), "%")
# Build the static ggplot
p <- ggplot(benford, aes(x = factor(digit), y = probability, fill = factor(digit))) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = label), vjust = -0.3, color = "#FFFF33", size = 5, fontface = "bold") +
scale_y_continuous(labels = percent_format(accuracy = 1), expand = expansion(mult = c(0, 0.1))) +
scale_fill_manual(values = c("#1f77b4", "#2ca02c", "#ff7f0e", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22")) +
labs(
title = "Benford's Law Probability Distribution",
x = "Leading Digit",
y = "Probability"
) +
theme_minimal(base_size = 14) +
theme(
plot.background = element_rect(fill = "#222222", color = NA),
panel.background = element_rect(fill = "#222222", color = NA),
panel.grid.major = element_line(color = "#444444"),
panel.grid.minor = element_line(color = "#333333"),
axis.text = element_text(color = "#DDDDDD"),
axis.title = element_text(color = "#FFFFFF"),
plot.title = element_text(color = "#FFFFFF", face = "bold")
)
# Convert to interactive plot
ggplotly(p)
library(ggplot2)
library(scales)
library(plotly)
benford <- data.frame(
digit = 1:9,
probability = log10(1 + 1 / (1:9))
)
benford$label <- paste0(sprintf("%.2f", benford$probability * 100), "%")
# Build the static ggplot
p <- ggplot(benford, aes(x = factor(digit), y = probability, fill = factor(digit))) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = label), vjust = -0.3, color = "#FFFF33", size = 5, fontface = "bold") +
scale_y_continuous(labels = percent_format(accuracy = 1), expand = expansion(mult = c(0, 0.1))) +
scale_fill_manual(values = c("#1f77b4", "#2ca02c", "#ff7f0e", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22")) +
labs(
title = "Benford's Law Probability Distribution",
x = "Leading Digit",
y = "Probability"
) +
theme_minimal(base_size = 14) +
theme(
plot.background = element_rect(fill = "#222222", color = NA),
panel.background = element_rect(fill = "#222222", color = NA),
panel.grid.major = element_line(color = "#444444"),
panel.grid.minor = element_line(color = "#333333"),
axis.text = element_text(color = "#DDDDDD"),
axis.title = element_text(color = "#FFFFFF"),
plot.title = element_text(color = "#FFFFFF", face = "bold")
)
# Convert to interactive plot
ggplotly(p) %>% layout(showlegend = FALSE)
library(ggplot2)
library(scales)
library(plotly)
benford <- data.frame(
digit = 1:9,
probability = log10(1 + 1 / (1:9))
)
benford$label <- paste0(sprintf("%.2f", benford$probability * 100), "%")
# Build the static ggplot
p <- ggplot(benford, aes(x = factor(digit), y = probability, fill = factor(digit))) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = label), vjust = -0.3, color = "#FFFF33", size = 5, fontface = "bold") +
scale_y_continuous(labels = percent_format(accuracy = 1), expand = expansion(mult = c(0, 0.1))) +
scale_fill_manual(values = c("#08306B", "#08519C", "#2171B5", "#4292C6", "#6BAED6", "#9ECAE1", "#C6DBEF", "#DEEBF7", "#F7FBFF")) +
labs(
title = "Benford's Law Probability Distribution",
x = "Leading Digit",
y = "Probability"
) +
theme_minimal(base_size = 14) +
theme(
plot.background = element_rect(fill = "#222222", color = NA),
panel.background = element_rect(fill = "#222222", color = NA),
panel.grid.major = element_line(color = "#444444"),
panel.grid.minor = element_line(color = "#333333"),
axis.text = element_text(color = "#DDDDDD"),
axis.title = element_text(color = "#FFFFFF"),
plot.title = element_text(color = "#FFFFFF", face = "bold")
)
# Convert to interactive plot
ggplotly(p) %>% layout(showlegend = FALSE)
library(ggplot2)
library(scales)
library(plotly)
benford <- data.frame(
digit = 1:9,
probability = log10(1 + 1 / (1:9))
)
benford$label <- paste0(sprintf("%.2f", benford$probability * 100), "%")
# Build the static ggplot
p <- ggplot(benford, aes(x = factor(digit), y = probability, fill = factor(digit))) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = label), vjust = -0.3, color = "#FFFF33", size = 5, fontface = "bold") +
scale_y_continuous(labels = percent_format(accuracy = 1), expand = expansion(mult = c(0, 0.1))) +
scale_fill_manual(values = c("#08306B", "#08519C", "#2171B5", "#4292C6", "#6BAED6", "#9ECAE1", "#BFD3E6", "#AFC6DC", "#9EBBD2")) +
labs(
title = "Benford's Law Probability Distribution",
x = "Leading Digit",
y = "Probability"
) +
theme_minimal(base_size = 14) +
theme(
plot.background = element_rect(fill = "#222222", color = NA),
panel.background = element_rect(fill = "#222222", color = NA),
panel.grid.major = element_line(color = "#444444"),
panel.grid.minor = element_line(color = "#333333"),
axis.text = element_text(color = "#DDDDDD"),
axis.title = element_text(color = "#FFFFFF"),
plot.title = element_text(color = "#FFFFFF", face = "bold")
)
# Convert to interactive plot
ggplotly(p) %>% layout(showlegend = FALSE)
